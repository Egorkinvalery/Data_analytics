Курсовая работа в SQL

Задача — смоделировать изменение балансов студентов. Баланс — это количество уроков, которое есть у каждого студента. 

- Сколько всего уроков было на балансе **всех учеников** за каждый календарный день;
- Как это количество менялось под влиянием транзакций (оплат, начислений, корректирующих списаний) и уроков (списаний с баланса по мере прохождения уроков).
- Создать визуализацию (линейную диаграмму) итогового результата. 

Код:
with first_payments as
            (select  user_id
                    ,min (transaction_datetime::date) as first_payment_date
             from skyeng_db.Payments
             where status_name = 'success'
             group by user_id
             order by user_id),
---------------------------------------------------
all_dates as           
            (select  distinct (class_start_datetime::date) as dt
             from skyeng_db.classes
             where date_part ('year',class_start_datetime) = 2016),
            
---------------------------------------------------
payments_by_dates as
            (select  user_id
                    ,transaction_datetime::date as payment_date
                    ,sum (classes) as transaction_balance_change
             from skyeng_db.Payments
             where status_name = 'success'
             group by user_id,payment_date
             order by user_id,payment_date),
---------------------------------------------------
all_dates_by_user as
            (select  user_id
                    ,dt
             from
             all_dates as a
             join first_payments b on a.dt >= b.first_payment_date),
---------------------------------------------------
classes_by_dates as
            (select  user_id
                    ,class_start_datetime::date as class_date
                    ,count (id_class) *-1 as classes
             from skyeng_db.classes 
             where   class_type != 'trial'
                     and (class_status = 'success'
                     or  class_status = 'failed_by_student')
             group by 1,2 
             order by classes desc),
---------------------------------------------------
payments_by_dates_cumsum as
            (select  a.user_id
                    ,dt
                    ,transaction_balance_change
                    ,sum (transaction_balance_change) over (partition by a.user_id order by dt) as transaction_balance_change_cs
             from 
             all_dates_by_user a
             left join payments_by_dates b on a.user_id=b.user_id and dt = payment_date
             order by user_id,payment_date),
---------------------------------------------------
classes_by_dates_dates_cumsum as
            (select  a.user_id
                    ,dt
                    ,coalesce (classes,0) as classes
                    ,sum (coalesce (classes,0)) over (partition by a.user_id order by dt) as classes_cs
             from 
             all_dates_by_user a
             left join classes_by_dates b on a.user_id=b.user_id and b.class_date = a.dt
             order by a.user_id),

---------------------------------------------------
balances as
            (select  a.user_id
                    ,a.dt
                    ,transaction_balance_change
                    ,transaction_balance_change_cs
                    ,classes
                    ,classes_cs
                    ,classes_cs + transaction_balance_change_cs as balance
             from
             payments_by_dates_cumsum a
             join classes_by_dates_dates_cumsum b on a.dt=b.dt and a.user_id=b.user_id
             order by balance asc
            -- limit 1000
            )
---------------------------------------------------
select   sum (transaction_balance_change)as transaction_balance_change_sum, 
         sum (transaction_balance_change_cs)as transaction_balance_change_cs_sum, 
         sum (classes)as classes_sum,
         sum (classes_cs)as classes_cs_sum, 
         sum (balance)as balance_sum,
         dt
from balances
group by dt
order by dt


Реузльтат: https://disk.yandex.ru/d/6T_H1yP6gUFyAA
